apiVersion: v1
kind: Namespace
metadata:
  name: oauth2-proxy
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: oauth2-proxy
  namespace: helm-controller
spec:
  repo: https://charts.bitnami.com/bitnami
  chart: oauth2-proxy
  version: 2.1.5
  targetNamespace: oauth2-proxy
  valuesContent: |-
    configuration:
      existingSecret: oauth2-proxy-secret
    nodeSelector:
      kubernetes.io/os: linux
      eks.amazonaws.com/capacityType: ON_DEMAND
    replicaCount: 2
    extraArgs:
      - --provider=oidc
      - --upstream=file:///dev/null
      - --upstream=http://oauth2-proxy-redirector/redirect/
      - --cookie-domain=.k8s-training.aws-tests.skyworkz.nl
      - --oidc-issuer-url=https://argocd.k8s-training.aws-tests.skyworkz.nl/api/dex
      - --scope=openid profile email groups


    # Extra components to deploy next to the OAuth2 Proxy
    # We run an extra Nginx-based deployment that is built to perform arbitrary redirects
    # which we can then use to have a steady RedirectURI
    # --> https://oauth2.$DOMAIN/redirect/<targetURI>
    # This way we can run a single instance of oauth2-proxy and we don't have to
    # update the corresponding StaticClient config in Dex for every other app we
    # want to expose using this proxy
    extraDeploy:
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: oauth2-proxy-nginx
          namespace: oauth2-proxy
        data:
          nginx.conf: |
            worker_processes 5;
            events {
            }
            http {
              server {
                listen 80 default_server;
                location = /healthcheck {
                  add_header Content-Type text/plain;
                  return 200 'ok';
                }
                location ~ /redirect/(.*) {
                  return 307 https://$1$is_args$args;
                }
              }
            }

      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            k8s-app: oauth2-proxy-redirector
          name: oauth2-proxy-redirector
          namespace: oauth2-proxy
        spec:
          replicas: 2
          selector:
            matchLabels:
              k8s-app: oauth2-proxy-redirector
          template:
            metadata:
              labels:
                k8s-app: oauth2-proxy-redirector
            spec:
              nodeSelector:
                kubernetes.io/os: linux
                eks.amazonaws.com/capacityType: ON_DEMAND
              volumes:
                - name: nginx
                  configMap:
                    name: oauth2-proxy-nginx
              containers:
                - name: nginx
                  image: nginx:1.17-alpine
                  imagePullPolicy: IfNotPresent
                  resources:
                    limits:
                      cpu: 0.2
                      memory: 512Mi
                  ports:
                    - name: http
                      containerPort: 80
                  volumeMounts:
                    - name: nginx
                      mountPath: /etc/nginx/
                      readOnly: true
                  livenessProbe:
                    httpGet:
                      path: /healthcheck
                      port: 80
                    initialDelaySeconds: 3
                    timeoutSeconds: 2
                    failureThreshold: 2
      - apiVersion: v1
        kind: Service
        metadata:
          labels:
            k8s-app: oauth2-proxy-redirector
          name: oauth2-proxy-redirector
          namespace: oauth2-proxy
        spec:
          ports:
          - name: http
            protocol: TCP
            targetPort: http
            port: 80
          selector:
            k8s-app: oauth2-proxy-redirector

      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: oauth2-proxy
          namespace: oauth2-proxy
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
            nginx.ingress.kubernetes.io/proxy-write-timeout: "3600"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
        spec:
          rules:
          - host: oauth2.k8s-training.aws-tests.skyworkz.nl
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: oauth2-proxy
                    port:
                      number: 80
          tls:
          - hosts:
            - oauth2.k8s-training.aws-tests.skyworkz.nl
            secretName: oauth2-proxy-ingress



